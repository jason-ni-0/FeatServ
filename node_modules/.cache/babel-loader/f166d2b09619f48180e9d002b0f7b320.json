{"ast":null,"code":"var _jsxFileName = \"/Users/jasonni/Desktop/feat-test/src/App.js\";\nimport React, { Component } from 'react'; //import 'React' default export, and { Component } non-default export from react\n\nimport fetch from 'isomorphic-fetch'; // isomorphic-fetch is used for both server side and client side 'fetch' (see https://github.com/matthew-andrews/isomorphic-fetch)\n// App.css was a hangover from the create-react-app, it's not really needed for this basic example\n\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nclass App extends Component {\n  // This is the same as 'extends 'React.Component'\n  constructor(props) {\n    super(props);\n\n    this.fetchIt = () => {\n      console.log(\"running\");\n      axios.post(`http://localhost:8000/results`, {\n        location: '21128'\n      }, {}).then(result => {\n        toast.success(result.data);\n        this.setState({\n          restaurant: result.data,\n          done: true\n        });\n      }).catch(err => {\n        if (err.message) err.response ? toast.error(err.response.data.msg ? err.response.data.msg : err.response.statusText) : toast.error(\"Network error\");else toast.error(\"Unknown error\");\n      });\n    };\n\n    this.state = {\n      fetchedData: null,\n      // stores the result of the fetch response body converted to a javascript object\n      restaurant: null,\n      done: true\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, sS) {\n    // Typical usage (don't forget to compare props):\n    if (this.state.fetchedData !== prevState.restaurant || this.state.done === false) {\n      //this.setState({fetchedData: this.state.fetchedData});\n      this.setState({\n        restaurant: this.state.fetchedData,\n        done: true\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.fetchedData) {\n      // only do the fetch if there is no fetchedData already (BTW this will run many times if the API is unavailable, or 'fetchIt() encounters an error)\n      this.fetchIt();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.fetchedData ? `Go eat at ${this.state.fetchedData}` : 'Getting data' // This is a 'ternary' expression, a simple 'if->else'\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; // Export our component to be used by other react higher order components (parents), in this case, it's imported in 'index.js', data is only fetched when the component renders.","map":{"version":3,"names":["React","Component","fetch","axios","ToastContainer","toast","getRandomInt","max","Math","floor","random","App","constructor","props","fetchIt","console","log","post","location","then","result","success","data","setState","restaurant","done","catch","err","message","response","error","msg","statusText","state","fetchedData","componentDidUpdate","prevProps","prevState","sS","render"],"sources":["/Users/jasonni/Desktop/feat-test/src/App.js"],"sourcesContent":["import React, { Component } from 'react'; //import 'React' default export, and { Component } non-default export from react\nimport fetch from 'isomorphic-fetch'; // isomorphic-fetch is used for both server side and client side 'fetch' (see https://github.com/matthew-andrews/isomorphic-fetch)\n// App.css was a hangover from the create-react-app, it's not really needed for this basic example\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nclass App extends Component { // This is the same as 'extends 'React.Component'\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fetchedData: null, // stores the result of the fetch response body converted to a javascript object\n            restaurant: null,\n            done: true\n        };\n    }\n    componentDidUpdate(prevProps, prevState, sS) {\n      // Typical usage (don't forget to compare props):\n      if ((this.state.fetchedData !== prevState.restaurant) || (this.state.done === false)) {\n        //this.setState({fetchedData: this.state.fetchedData});\n        this.setState({restaurant: this.state.fetchedData, done: true});\n      }\n    }\n\n  fetchIt = () => {\n    console.log(\"running\");\n    axios\n    .post(\n      `http://localhost:8000/results`,\n      {\n        location:'21128'\n      },\n      {\n      }\n    )\n    .then((result) => {\n      toast.success(result.data);\n      this.setState({restaurant: result.data, done: true});\n    })\n    .catch((err) => {\n      if (err.message)\n        err.response\n          ? toast.error(\n              err.response.data.msg\n                ? err.response.data.msg\n                : err.response.statusText\n            )\n          : toast.error(\"Network error\");\n      else toast.error(\"Unknown error\");\n    });\n}\n\n\n  render() {\n      if(!this.state.fetchedData){ // only do the fetch if there is no fetchedData already (BTW this will run many times if the API is unavailable, or 'fetchIt() encounters an error)\n          this.fetchIt();\n      }\n\n    return (\n      <div>\n        <h1>\n        {\n          this.state.fetchedData ? `Go eat at ${this.state.fetchedData}`  : 'Getting data' // This is a 'ternary' expression, a simple 'if->else'\n        }\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App; // Export our component to be used by other react higher order components (parents), in this case, it's imported in 'index.js', data is only fetched when the component renders."],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,OAAOC,KAAP,MAAkB,kBAAlB,C,CAAsC;AACtC;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;EACzB,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACD;;AAED,MAAMI,GAAN,SAAkBV,SAAlB,CAA4B;EAAE;EAE1BW,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;;IADe,KAgBrBC,OAhBqB,GAgBX,MAAM;MACdC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAb,KAAK,CACJc,IADD,CAEG,+BAFH,EAGE;QACEC,QAAQ,EAAC;MADX,CAHF,EAME,EANF,EASCC,IATD,CASOC,MAAD,IAAY;QAChBf,KAAK,CAACgB,OAAN,CAAcD,MAAM,CAACE,IAArB;QACA,KAAKC,QAAL,CAAc;UAACC,UAAU,EAAEJ,MAAM,CAACE,IAApB;UAA0BG,IAAI,EAAE;QAAhC,CAAd;MACD,CAZD,EAaCC,KAbD,CAaQC,GAAD,IAAS;QACd,IAAIA,GAAG,CAACC,OAAR,EACED,GAAG,CAACE,QAAJ,GACIxB,KAAK,CAACyB,KAAN,CACEH,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBS,GAAlB,GACIJ,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBS,GADtB,GAEIJ,GAAG,CAACE,QAAJ,CAAaG,UAHnB,CADJ,GAMI3B,KAAK,CAACyB,KAAN,CAAY,eAAZ,CANJ,CADF,KAQKzB,KAAK,CAACyB,KAAN,CAAY,eAAZ;MACN,CAvBD;IAwBH,CA1CsB;;IAEf,KAAKG,KAAL,GAAa;MACTC,WAAW,EAAE,IADJ;MACU;MACnBV,UAAU,EAAE,IAFH;MAGTC,IAAI,EAAE;IAHG,CAAb;EAKH;;EACDU,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,EAAvB,EAA2B;IAC3C;IACA,IAAK,KAAKL,KAAL,CAAWC,WAAX,KAA2BG,SAAS,CAACb,UAAtC,IAAsD,KAAKS,KAAL,CAAWR,IAAX,KAAoB,KAA9E,EAAsF;MACpF;MACA,KAAKF,QAAL,CAAc;QAACC,UAAU,EAAE,KAAKS,KAAL,CAAWC,WAAxB;QAAqCT,IAAI,EAAE;MAA3C,CAAd;IACD;EACF;;EA+BHc,MAAM,GAAG;IACL,IAAG,CAAC,KAAKN,KAAL,CAAWC,WAAf,EAA2B;MAAE;MACzB,KAAKpB,OAAL;IACH;;IAEH,oBACE;MAAA,uBACE;QAAA,UAEE,KAAKmB,KAAL,CAAWC,WAAX,GAA0B,aAAY,KAAKD,KAAL,CAAWC,WAAY,EAA7D,GAAkE,cAFpE,CAEmF;;MAFnF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AA7DyB;;AAgE5B,eAAevB,GAAf,C,CAAoB"},"metadata":{},"sourceType":"module"}