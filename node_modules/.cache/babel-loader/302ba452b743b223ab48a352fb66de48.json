{"ast":null,"code":"var _jsxFileName = \"/Users/jasonni/Desktop/feat-test/src/App.js\";\nimport React, { Component } from 'react'; //import 'React' default export, and { Component } non-default export from react\n// App.css was a hangover from the create-react-app, it's not really needed for this basic example\n\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nclass App extends Component {\n  // This is the same as 'extends 'React.Component'\n  constructor(props) {\n    super(props);\n\n    this.fetchIt = () => {\n      /*\n      console.log(\"running\");\n        fetch('http://localhost:8000/results', { mode: 'cors' }) // Make sure fetch is cross-origin, it's not by default (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) since the target URL of the API is a different 'origin' to our react app\n            .then((resp) => {\n              console.log(resp);\n            return resp.json(); })\n            .then((data) => { // data input parameter is the result of the resolved resp.json() Promise (see https://developer.mozilla.org/en-US/docs/Web/API/Body/json)\n              var businesses = [];\n          for (const business of data) {  \n              businesses.push(business);\n          }\n          const result = businesses[getRandomInt(businesses.length)].name;\n          this.setState({fetchedData: result, done: false});\n            })\n            .catch(function(error) {\n                console.log(JSON.stringify(error));\n            });\n            */\n      axios.get(`http://localhost:8000/results`, {\n        params: {\n          location: 21128\n        }\n      }).then(res => {\n        var businesses = [];\n\n        for (const business of res.data) {\n          businesses.push(business);\n        }\n\n        const result = businesses[getRandomInt(businesses.length)].name;\n        this.setState({\n          fetchedData: result\n        });\n      });\n    };\n\n    this.state = {\n      fetchedData: null,\n      // stores the result of the fetch response body converted to a javascript object\n      restaurant: null\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, sS) {\n    // Typical usage (don't forget to compare props):\n    if (this.state.fetchedData !== prevState.restaurant || this.state.done === false) {\n      //this.setState({fetchedData: this.state.fetchedData});\n      this.setState({\n        restaurant: this.state.fetchedData,\n        done: true\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.fetchedData) {\n      // only do the fetch if there is no fetchedData already (BTW this will run many times if the API is unavailable, or 'fetchIt() encounters an error)\n      this.fetchIt();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.fetchedData ? `Go eat at ${this.state.fetchedData}` : 'Getting data' // This is a 'ternary' expression, a simple 'if->else'\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; // Export our component to be used by other react higher order components (parents), in this case, it's imported in 'index.js', data is only fetched when the component renders.","map":{"version":3,"names":["React","Component","axios","getRandomInt","max","Math","floor","random","App","constructor","props","fetchIt","get","params","location","then","res","businesses","business","data","push","result","length","name","setState","fetchedData","state","restaurant","componentDidUpdate","prevProps","prevState","sS","done","render"],"sources":["/Users/jasonni/Desktop/feat-test/src/App.js"],"sourcesContent":["import React, { Component } from 'react'; //import 'React' default export, and { Component } non-default export from react\n// App.css was a hangover from the create-react-app, it's not really needed for this basic example\nimport axios from \"axios\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nclass App extends Component { // This is the same as 'extends 'React.Component'\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fetchedData: null, // stores the result of the fetch response body converted to a javascript object\n            restaurant: null,\n        };\n    }\n    componentDidUpdate(prevProps, prevState, sS) {\n      // Typical usage (don't forget to compare props):\n      if ((this.state.fetchedData !== prevState.restaurant) || (this.state.done === false)) {\n        //this.setState({fetchedData: this.state.fetchedData});\n        this.setState({restaurant: this.state.fetchedData, done: true});\n      }\n    }\n\n  fetchIt = () => {\n    /*\n    console.log(\"running\");\n      fetch('http://localhost:8000/results', { mode: 'cors' }) // Make sure fetch is cross-origin, it's not by default (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) since the target URL of the API is a different 'origin' to our react app\n          .then((resp) => {\n            console.log(resp);\n          return resp.json(); })\n          .then((data) => { // data input parameter is the result of the resolved resp.json() Promise (see https://developer.mozilla.org/en-US/docs/Web/API/Body/json)\n            var businesses = [];\n        for (const business of data) {  \n            businesses.push(business);\n        }\n        const result = businesses[getRandomInt(businesses.length)].name;\n        this.setState({fetchedData: result, done: false});\n          })\n          .catch(function(error) {\n              console.log(JSON.stringify(error));\n          });\n          */\n          axios.get(`http://localhost:8000/results`, { params: { location: 21128 }})\n      .then(res => {\n        var businesses = [];\n        for (const business of res.data) {  \n          businesses.push(business);\n        }\n        const result = businesses[getRandomInt(businesses.length)].name;\n        this.setState({fetchedData: result});\n        })\n  }\n\n\n\n  render() {\n      if(!this.state.fetchedData){ // only do the fetch if there is no fetchedData already (BTW this will run many times if the API is unavailable, or 'fetchIt() encounters an error)\n          this.fetchIt();\n      }\n\n    return (\n      <div>\n        <h1>\n        {\n          this.state.fetchedData ? `Go eat at ${this.state.fetchedData}`  : 'Getting data' // This is a 'ternary' expression, a simple 'if->else'\n        }\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App; // Export our component to be used by other react higher order components (parents), in this case, it's imported in 'index.js', data is only fetched when the component renders."],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;AAC1C;;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;EACzB,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACD;;AAED,MAAMI,GAAN,SAAkBP,SAAlB,CAA4B;EAAE;EAE1BQ,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;;IADe,KAerBC,OAfqB,GAeX,MAAM;MACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACUT,KAAK,CAACU,GAAN,CAAW,+BAAX,EAA2C;QAAEC,MAAM,EAAE;UAAEC,QAAQ,EAAE;QAAZ;MAAV,CAA3C,EACHC,IADG,CACEC,GAAG,IAAI;QACX,IAAIC,UAAU,GAAG,EAAjB;;QACA,KAAK,MAAMC,QAAX,IAAuBF,GAAG,CAACG,IAA3B,EAAiC;UAC/BF,UAAU,CAACG,IAAX,CAAgBF,QAAhB;QACD;;QACD,MAAMG,MAAM,GAAGJ,UAAU,CAACd,YAAY,CAACc,UAAU,CAACK,MAAZ,CAAb,CAAV,CAA4CC,IAA3D;QACA,KAAKC,QAAL,CAAc;UAACC,WAAW,EAAEJ;QAAd,CAAd;MACC,CARC;IASP,CA3CoB;;IAEf,KAAKK,KAAL,GAAa;MACTD,WAAW,EAAE,IADJ;MACU;MACnBE,UAAU,EAAE;IAFH,CAAb;EAIH;;EACDC,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,EAAvB,EAA2B;IAC3C;IACA,IAAK,KAAKL,KAAL,CAAWD,WAAX,KAA2BK,SAAS,CAACH,UAAtC,IAAsD,KAAKD,KAAL,CAAWM,IAAX,KAAoB,KAA9E,EAAsF;MACpF;MACA,KAAKR,QAAL,CAAc;QAACG,UAAU,EAAE,KAAKD,KAAL,CAAWD,WAAxB;QAAqCO,IAAI,EAAE;MAA3C,CAAd;IACD;EACF;;EAkCHC,MAAM,GAAG;IACL,IAAG,CAAC,KAAKP,KAAL,CAAWD,WAAf,EAA2B;MAAE;MACzB,KAAKd,OAAL;IACH;;IAEH,oBACE;MAAA,uBACE;QAAA,UAEE,KAAKe,KAAL,CAAWD,WAAX,GAA0B,aAAY,KAAKC,KAAL,CAAWD,WAAY,EAA7D,GAAkE,cAFpE,CAEmF;;MAFnF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AA/DyB;;AAkE5B,eAAejB,GAAf,C,CAAoB"},"metadata":{},"sourceType":"module"}